@page "/products"


@inject IDialogService DialogService
@inject IDispatcher Dispatcher
@inject IState<ProductsState> ProductsState
@inject ISnackbar Snackbar
@using System.Globalization;




<MudGrid>
    <MudItem xs="12">
        <MudCard Style="border-radius:10px;" Outlined="true">
            <MudCardHeader>
                <CardHeaderContent>
                    <MudToolBar Style="margin:0px;padding:0px;width:100%">
                        <MudText Typo="Typo.h6">Products</MudText>
                        <MudSpacer />
                        <MudButtonGroup Size="Size.Medium" Color="Color.Primary" Variant="Variant.Outlined">
                            <MudIconButton ButtonType="ButtonType.Button" OnClick="Save" Color="Color.Success" Size="Size.Medium" Icon="@Icons.Material.Filled.Save" aria-label="Save"></MudIconButton>
                            <MudIconButton ButtonType="ButtonType.Button" Color="Color.Primary" Size="Size.Medium" OnClick="OenSearch" Icon="@Icons.Material.Filled.Search" aria-label="Search"></MudIconButton>
                            <MudIconButton ButtonType="ButtonType.Button" Color="Color.Error" Size="Size.Medium" OnClick="Clear" Icon="@Icons.Material.Filled.Cancel" aria-label="Clear"></MudIconButton>
                        </MudButtonGroup>
                    </MudToolBar>
                </CardHeaderContent>
            </MudCardHeader>
            <MudCardContent>
                <MudTextField @ref="mudTextField" AutoFocus="true" @bind-Value="product.Name" Label="Name" Variant="Variant.Outlined" Margin="Margin.Dense" Class="mb-4" />
                <MudNumericField Class="mb-4" Culture=@_en Format="N2" @bind-Value="product.VATRate" Min="0" Label="VAT Rate" Variant="Variant.Outlined" Margin="Margin.Dense" />
                <MudNumericField Culture=@_en Format="N2" @bind-Value="product.Price" Min="0" Label="Price" Variant="Variant.Outlined" Margin="Margin.Dense"  />
            </MudCardContent>
            <br />
        </MudCard>
    </MudItem>
</MudGrid>



<MudDrawer @bind-Open="@openSearch" Style="text-align:center;align-content:center" Color="Color.Transparent" Anchor="Anchor.Top" Variant="@DrawerVariant.Temporary" Elevation="0">
    <MudDrawerContainer>
        <MudCard Style="border-radius:10px;margin:15px;max-height:100%;text-align:center; align-self:center; vertical-align:central;align-content:center" Elevation="3" Outlined="true">
            <MudTable Breakpoint="Breakpoint.Sm" Height="450px" HorizontalScrollbar="true" Style="border-radius:15px;" Filter="new Func<Product, bool>(Search)" FixedHeader="true" Dense="true" Bordered="true" Striped="true" Elevation="0" Items="@products" Hover="true" T="Product">
                <ToolBarContent>
                    <MudIconButton OnClick="CloseSearchFunc" Style="left:-10px" Size="Size.Medium" Color="Color.Primary" Icon="@Icons.Material.Filled.ArrowBack"></MudIconButton>
                    <MudTextField @ref="mudTxtSearch" @bind-Value="searchString" Margin="Margin.Dense" Style="top:-6px" Placeholder="Search For Product..." Adornment="Adornment.End" IconSize="Size.Small" />
                </ToolBarContent>
                <HeaderContent>
                    <MudTh>Name</MudTh>
                    <MudTh>Price</MudTh>
                    <MudTh></MudTh>
                </HeaderContent>
                <RowTemplate>
                    <MudTd DataLabel="Name">
                        <MudGrid>
                            <MudItem xs="12">
                                <MudTextField ReadOnly FullWidth="true" Immediate="true" @bind-Value="@context.Name" Label="" Variant="Variant.Outlined" Margin="Margin.Dense" />
                            </MudItem>
                        </MudGrid>
                    </MudTd>
                    <MudTd DataLabel="Price&nbsp;">
                        <MudGrid>
                            <MudItem xs="12">
                                <MudNumericField ReadOnly Min="0" FullWidth="true" Immediate="true" HideSpinButtons="true" @bind-Value="@context.Price" Label="" Variant="Variant.Outlined" Margin="Margin.Dense" />
                            </MudItem>
                        </MudGrid>
                    </MudTd>
                    <MudTd DataLabel="" Style="align-items:center;text-align:center">
                        <MudIconButton Size="Size.Medium" Icon="@Icons.Material.Filled.ContentCopy" Color="Color.Primary" @onclick="@(()=>Copy(@context))"></MudIconButton>
                        <MudIconButton Style="margin-left:16px;margin-right:16px" Size="Size.Medium" Icon="@Icons.Material.Filled.Edit" Color="Color.Primary" @onclick="@(()=>Edit(@context))"></MudIconButton>
                        <MudIconButton Size="Size.Medium" @onclick="@(()=>Delete(@context))" Color="Color.Error" Icon="@Icons.Material.Filled.DeleteOutline"></MudIconButton>
                    </MudTd>
                </RowTemplate>
                <PagerContent>
                    <MudTablePager />
                </PagerContent>
            </MudTable>
        </MudCard>
    </MudDrawerContainer>
</MudDrawer>




@code {

    public CultureInfo _en = CultureInfo.GetCultureInfo("en-US");
    public string searchString { get; set; }
    private Product product = new();
    private bool busy;
    MudTextField<string> mudTextField;
    MudTextField<string> mudTxtSearch;
    bool openSearch = false;


    Product[] products => openSearch ? ProductsState.Value.Products : new Product[] { };


    private async Task Copy(Product product)
    {
        try
        {
            this.product = new();
            this.product.Name = product.Name;
            this.product.Price = product.Price;
            this.product.VATRate = product.VATRate;
            openSearch = false;
            await mudTextField.FocusAsync();
        }
        catch
        {

        }


    }

    private async Task Edit(Product product)
    {
        try
        {
            this.product = product;
            openSearch = false;
            await mudTextField.FocusAsync();
        }
        catch
        {

        }

    }

    private async void Delete(Product dproduct)
    {
        try
        {
            var confirm = await Dialog.ShowDelete(DialogService);
            if (confirm)
            {
                Dispatcher.Dispatch(new ProductsDeleteAction(dproduct));
                await mudTextField.FocusAsync();
                openSearch = false;
                StateHasChanged();
            }
        }
        catch
        {

        }

    }

    private async Task Save()
    {
        try
        {
            var success = true;

            if (string.IsNullOrEmpty(product.Name))
            {
                success = false;
                Snackbar.Add("Name of prodact must be entered", Severity.Error);
            }

            if (success)
            {
                Dispatcher.Dispatch(new ProductsSaveAction(product));
                product = new();
            }
            await mudTextField.FocusAsync();
        }
        catch
        {

        }

    }

    private async void OenSearch()
    {
        openSearch = true;
        if (!ProductsState.Value.Products.Any())
        {
            Dispatcher.Dispatch(new ProductsLoadAction());
        }
        await mudTxtSearch.FocusAsync();

    }

    private bool Search(Product prodact)
    {
        var res = string.IsNullOrEmpty(searchString) ||
        string.IsNullOrWhiteSpace(searchString) ||
        prodact.Name.Contains(searchString, StringComparison.OrdinalIgnoreCase);
        return res;
    }

    private async void Clear()
    {
        product = new Product();
        await mudTextField.FocusAsync();
    }

    private async void CloseSearchFunc()
    {
        openSearch = false;
        await mudTextField.FocusAsync();
    }

}
