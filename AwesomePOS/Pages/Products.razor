@page "/products"


@inject IDialogService DialogService
@inject IDispatcher Dispatcher
@inject IState<ProductsState> ProductsState
@using System.Globalization;



<MudForm Model="@product">
    <MudGrid>
        <MudItem xs="12">
            <MudCard Style="border-radius:10px;" Outlined="true">
                <MudCardHeader>
                    <CardHeaderContent>
                        <MudText Typo="Typo.h6">Add / Edit Products</MudText>
                    </CardHeaderContent>
                </MudCardHeader>
                <MudCardContent>
                    <MudTextField For="@(() => product.Name)" Required="true" RequiredError="User name is required!" @ref="mudTextField" AutoFocus="true" @bind-Value="product.Name" Label="Name" Variant="Variant.Outlined" Margin="Margin.Dense" Class="mb-4" />
                    <MudNumericField Culture=@_en Format="N2" @bind-Value="product.Price" Min="0" Label="Price" Variant="Variant.Outlined" Margin="Margin.Dense" Class="mb-4" />
                    <MudNumericField Culture=@_en Format="N2" @bind-Value="product.VATRate" Min="0" Label="VAT Rate" Variant="Variant.Outlined" Margin="Margin.Dense" />
                </MudCardContent>
                <br />
            </MudCard>
        </MudItem>
    </MudGrid>
    <MudToolBar Style="margin:0px;padding:0px;width:100%">
        <MudSpacer />
        <MudButtonGroup Size="Size.Medium" Variant="Variant.Outlined">
            <MudIconButton OnClick="Save"  Color="Color.Success" Size="Size.Medium" Icon="@Icons.Material.Filled.Save" aria-label="Save"></MudIconButton>
            <MudIconButton Color="Color.Primary" Size="Size.Medium" OnClick="SearchFunc" Icon="@Icons.Material.Filled.Search" aria-label="Search"></MudIconButton>
            <MudIconButton Color="Color.Error" Size="Size.Medium" OnClick="SearchFunc" Icon="@Icons.Material.Filled.Cancel" aria-label="Clear"></MudIconButton>
        </MudButtonGroup>
    </MudToolBar>
</MudForm>


<MudDrawer @bind-Open="@openSearch" Style="max-height:100%" Color="Color.Transparent" Anchor="Anchor.Top" Variant="@DrawerVariant.Temporary" Elevation="0">
    <MudDrawerContainer>
        <MudCard Style="border-radius:10px;margin:15px;" Elevation="3" Outlined="true">
            <MudTable FixedHeader="true" Dense="true" Bordered="true" Striped="true" Elevation="0" Style="border-radius:15px;" Items="@products" Hover="true" Breakpoint="Breakpoint.Sm" T="Product">
                <ToolBarContent>
                    <MudIconButton OnClick="CloseSearchFunc" Style="left:-10px" Size="Size.Medium" Color="Color.Primary" Icon="@Icons.Material.Filled.ArrowBack"></MudIconButton>
                    <MudTextField @bind-Value="Search" Margin="Margin.Dense" Style="top:-6px" Placeholder="Search For Product..." Adornment="Adornment.End" IconSize="Size.Small" />
                </ToolBarContent>
                <HeaderContent>
                    <MudTh>Name</MudTh>
                    <MudTh>Price</MudTh>
                    <MudTh></MudTh>
                </HeaderContent>
                <RowTemplate>
                    <MudTd DataLabel="Name">
                        <MudGrid>
                            <MudItem xs="12">
                                <MudTextField ReadOnly FullWidth="true" Immediate="true" @bind-Value="@context.Name" Label="" Variant="Variant.Outlined" Margin="Margin.Dense" />
                            </MudItem>
                        </MudGrid>
                    </MudTd>
                    <MudTd DataLabel="Price&nbsp;">
                        <MudGrid>
                            <MudItem xs="12">
                                <MudNumericField ReadOnly Min="0" FullWidth="true" Immediate="true" HideSpinButtons="true" @bind-Value="@context.Price" Label="" Variant="Variant.Outlined" Margin="Margin.Dense" />
                            </MudItem>
                        </MudGrid>
                    </MudTd>
                    <MudTd DataLabel="" Style="align-items:center;text-align:center">
                        <MudIconButton Size="Size.Medium" Icon="@Icons.Material.Filled.ContentCopy" Color="Color.Primary" @onclick="@(()=>Copy(@context))"></MudIconButton>
                        <MudIconButton Style="margin-left:16px;margin-right:16px" Size="Size.Medium" Icon="@Icons.Material.Filled.Edit" Color="Color.Primary" @onclick="@(()=>Edit(@context))"></MudIconButton>
                        <MudIconButton Size="Size.Medium" @onclick="@(()=>Delete(@context))" Color="Color.Error" Icon="@Icons.Material.Filled.DeleteOutline"></MudIconButton>
                    </MudTd>
                </RowTemplate>
                <PagerContent>
                    <MudTablePager />
                </PagerContent>
            </MudTable>
        </MudCard>
    </MudDrawerContainer>
</MudDrawer>




@code {

    public CultureInfo _en = CultureInfo.GetCultureInfo("en-US");
    public string Search { get; set; }
    private Product product = new();
    private bool busy;
    MudTextField<string> mudTextField;
    bool openSearch = false;

    Product[] products => openSearch ? ProductsState.Value.Products : new Product[] { };


    private async Task Copy(Product product)
    {
        try
        {
            this.product = new();
            this.product.Name = product.Name;
            this.product.Price = product.Price;
            this.product.VATRate = product.VATRate;
            openSearch = false;
            await mudTextField.FocusAsync();
        }
        catch
        {

        }


    }

    private async Task Edit(Product product)
    {
        try
        {
            this.product = product;
            openSearch = false;
            await mudTextField.FocusAsync();
        }
        catch
        {

        }

    }

    private async void Delete(Product dproduct)
    {
        try
        {
            var confirm = await Dialog.ShowDelete(DialogService);
            if (confirm)
            {
                Dispatcher.Dispatch(new ProductsDeleteAction(dproduct));
                await mudTextField.FocusAsync();
                openSearch = false;
                StateHasChanged();
            }
        }
        catch
        {

        }

    }

    private async Task Save()
    {
        try
        {
            Dispatcher.Dispatch(new ProductsSaveAction(product));
            product = new();
            await mudTextField.FocusAsync();
            openSearch = false;
        }
        catch
        {

        }

    }

    private void SearchFunc()
    {
        openSearch = true;

        if (!ProductsState.Value.Products.Any())
        {
            Dispatcher.Dispatch(new ProductsLoadAction());
        }
    }

    private void CloseSearchFunc()
    {
        openSearch = false;
    }
}
