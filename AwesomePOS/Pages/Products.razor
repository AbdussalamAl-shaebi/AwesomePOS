@page "/products"

@using Microsoft.EntityFrameworkCore

@inject IDialogService DialogService
@inject ISqliteWasmDbContextFactory<AppLocalContext> Factory
@inject IDispatcher Dispatcher
@inject IState<ProductsState> ProductsState
@using System.Globalization;




<MudCard Style="border-radius:10px;" Outlined="true">
    <MudCardHeader>
        <CardHeaderContent>
            <MudText Typo="Typo.h6">Add / Edit Products</MudText>
        </CardHeaderContent>
    </MudCardHeader>
    <MudCardContent>
        <MudForm Model="product">
            <MudTextField @ref="mudTextField" AutoFocus="true" @bind-Value="product.Name" Label="Name" Variant="Variant.Outlined" Margin="Margin.Dense" Class="mb-4" />
            <MudNumericField Culture=@_en Format="N2" @bind-Value="product.Price" Min="1" Label="Price" Variant="Variant.Outlined" Margin="Margin.Dense" />
        </MudForm>
    </MudCardContent>
    <br />
</MudCard>

<MudToolBar Style="margin:0;padding:0">
    <MudSpacer />
    <MudButtonGroup Color="Color.Primary" Variant="Variant.Outlined" OverrideStyles="true">
        <MudButton Tr="TextTransform.Lowercase" StartIcon="@Icons.Material.Filled.Save" IconColor="Color.Success" OnClick="Save">Save</MudButton>
        <MudButton IconColor="Color.Error" StartIcon="@Icons.Material.Filled.Cancel">Clear</MudButton>
    </MudButtonGroup>
</MudToolBar>
<br />


<MudCard Style="border-radius:10px;" Outlined="true">
    <MudTable Elevation="0" Style="border-radius:15px" Items="@products" Hover="true" Breakpoint="Breakpoint.Sm" T="Product">
        <ToolBarContent>
            <MudSpacer />
            <MudTextField @bind-Value="Search" Placeholder="Search For Product..." Adornment="Adornment.End" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
        </ToolBarContent>
        <HeaderContent>
            <MudTh Style="width:70%">Name</MudTh>
            <MudTh Style="width:30%">Price</MudTh>
            <MudTh></MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="Name">@context.Name</MudTd>
            <MudTd DataLabel="Price">@context.Price</MudTd>
            <MudTd DataLabel="">
                <MudButtonGroup Color="Color.Primary" Variant="Variant.Outlined">
                    <MudIconButton Icon="@Icons.Material.Filled.ContentCopy" Color="Color.Primary" @onclick="@(()=>Copy(@context))"></MudIconButton>
                    <MudIconButton Icon="@Icons.Material.Filled.Edit" Color="Color.Primary" @onclick="@(()=>Edit(@context))"></MudIconButton>
                    <MudIconButton @onclick="@(()=>Delete(@context))" Color="Color.Error" Icon="@Icons.Material.Filled.DeleteOutline"></MudIconButton>
                </MudButtonGroup>
            </MudTd>
        </RowTemplate>
    </MudTable>
</MudCard>




@code {

    public CultureInfo _en = CultureInfo.GetCultureInfo("en-US");
    public string Search { get; set; }
    private Product product = new();
    private bool busy;
    MudTextField<string> mudTextField;

    Product[] products => ProductsState.Value.Products;


    protected override async Task OnInitializedAsync()
    {
        await RefreshListAsync();
    }


    private async Task RefreshListAsync()
    {
        if (!ProductsState.Value.Products.Any())
        {
            Dispatcher.Dispatch(new ProductsLoadAction());
        }
    }

    private async Task Copy(Product product)
    {
        this.product = new();
        this.product.Name = product.Name;
        this.product.Price = product.Price;
        await mudTextField.FocusAsync();

    }

    private async Task Edit(Product product)
    {
        this.product = product;
        await mudTextField.FocusAsync();
    }

    private async void Delete(Product dproduct)
    {
        var confirm = await Dialog.ShowDelete(DialogService);
        if (confirm)
        {
            Dispatcher.Dispatch(new ProductsDeleteAction(dproduct));
            await mudTextField.FocusAsync();
            StateHasChanged();
        }
    }

    private async Task Save()
    {
        Dispatcher.Dispatch(new ProductsSaveAction(product));
        product = new();
        await mudTextField.FocusAsync();
    }
}
