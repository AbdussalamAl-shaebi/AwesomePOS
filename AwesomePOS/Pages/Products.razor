@page "/products"


@inject IDialogService DialogService
@inject IDispatcher Dispatcher
@inject IState<ProductsState> ProductsState
@using System.Globalization;



<MudGrid>
    <MudItem xs="12">

    </MudItem>
    <MudItem xs="12">
        <MudCard Style="border-radius:10px;" Outlined="true">
            <MudCardHeader>
                <CardHeaderContent>
                    <MudText Typo="Typo.h6">Add / Edit Products</MudText>
                </CardHeaderContent>
            </MudCardHeader>
            <MudCardContent>
                <MudForm Model="product">
                    <MudTextField @ref="mudTextField" AutoFocus="true" @bind-Value="product.Name" Label="Name" Variant="Variant.Outlined" Margin="Margin.Dense" Class="mb-4" />
                    <MudNumericField Culture=@_en Format="N2" @bind-Value="product.Price" Min="1" Label="Price" Variant="Variant.Outlined" Margin="Margin.Dense" />
                </MudForm>
            </MudCardContent>
            <br />
        </MudCard>
    </MudItem>
    <MudItem xs="12">
    </MudItem>
</MudGrid>





<MudAppBar Bottom="true" Fixed="true" Color="Color.Primary" Dense="true" Elevation="0">
    <MudToolBar Style="width:100%">
        <MudSpacer />
        <MudButtonGroup Size="Size.Small" Style="color:white" Variant="Variant.Outlined" OverrideStyles="true">
            <MudIconButton Style="color:white" Size="Size.Small" OnClick="Save" Icon="@Icons.Material.Filled.Save" aria-label="Save"></MudIconButton>
            <MudIconButton Style="color:white" Size="Size.Small" OnClick="SearchFunc" Icon="@Icons.Material.Filled.Search" aria-label="Search"></MudIconButton>
            <MudIconButton Style="color:white" Size="Size.Small" OnClick="SearchFunc" Icon="@Icons.Material.Filled.Cancel" aria-label="Clear"></MudIconButton>
        </MudButtonGroup>
    </MudToolBar>
</MudAppBar>




<MudDrawer @bind-Open="@openSearch" Anchor="Anchor.Top" Variant="@DrawerVariant.Temporary" Elevation="1">
    <MudDrawerContainer>
        <MudCard Style="border-radius:10px;margin:15px" Elevation="3" Outlined="true">
            <MudTable Elevation="0" Style="border-radius:15px" Items="@products" Hover="true" Breakpoint="Breakpoint.Sm" T="Product">
                <ToolBarContent>
                    <MudSpacer />
                    <MudTextField @bind-Value="Search" Placeholder="Search For Product..." Adornment="Adornment.End" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
                </ToolBarContent>
                <HeaderContent>
                    <MudTh Style="width:70%">Name</MudTh>
                    <MudTh Style="width:30%">Price</MudTh>
                    <MudTh></MudTh>
                </HeaderContent>
                <RowTemplate>
                    <MudTd DataLabel="Name">@context.Name</MudTd>
                    <MudTd DataLabel="Price">@context.Price</MudTd>
                    <MudTd DataLabel="">
                        <MudButtonGroup Color="Color.Primary" Variant="Variant.Outlined">
                            <MudIconButton Icon="@Icons.Material.Filled.ContentCopy" Color="Color.Primary" @onclick="@(()=>Copy(@context))"></MudIconButton>
                            <MudIconButton Icon="@Icons.Material.Filled.Edit" Color="Color.Primary" @onclick="@(()=>Edit(@context))"></MudIconButton>
                            <MudIconButton @onclick="@(()=>Delete(@context))" Color="Color.Error" Icon="@Icons.Material.Filled.DeleteOutline"></MudIconButton>
                        </MudButtonGroup>
                    </MudTd>
                </RowTemplate>
            </MudTable>
        </MudCard>
    </MudDrawerContainer>
</MudDrawer>




@code {

    public CultureInfo _en = CultureInfo.GetCultureInfo("en-US");
    public string Search { get; set; }
    private Product product = new();
    private bool busy;
    MudTextField<string> mudTextField;
    bool openSearch = false;

    Product[] products => openSearch ? ProductsState.Value.Products : new Product[] { };
    

    private async Task Copy(Product product)
    {
        try
        {
            this.product = new();
            this.product.Name = product.Name;
            this.product.Price = product.Price;
            openSearch = false;
            await mudTextField.FocusAsync();
        }
        catch
        {

        }


    }

    private async Task Edit(Product product)
    {
        try
        {
            this.product = product;
            openSearch = false;
            await mudTextField.FocusAsync();
        }
        catch
        {

        }

    }

    private async void Delete(Product dproduct)
    {
        try
        {
            var confirm = await Dialog.ShowDelete(DialogService);
            if (confirm)
            {
                Dispatcher.Dispatch(new ProductsDeleteAction(dproduct));
                await mudTextField.FocusAsync();
                openSearch = false;
                StateHasChanged();
            }
        }
        catch
        {

        }

    }

    private async Task Save()
    {
        try
        {
            Dispatcher.Dispatch(new ProductsSaveAction(product));
            product = new();
            await mudTextField.FocusAsync();
            openSearch = false;
        }
        catch
        {

        }

    }

    private void SearchFunc()
    {
        openSearch = true;

        if (!ProductsState.Value.Products.Any())
        {
            Dispatcher.Dispatch(new ProductsLoadAction());
        }
    }
}
